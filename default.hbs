
<!DOCTYPE html>
<html class="no-js" lang="{{@site.locale}}" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{{meta_title page=(t "Page %")}}</title>
    <!-- CSS Files -->
    {{!-- <link rel="stylesheet" type="text/css" href="{{asset "/css/style.css"}}" /> --}}
    <link rel="stylesheet" href="{{asset 'build/css/build.css'}}" />
    {{ghost_head}}
</head>
<body class="{{body_class}} ">
<div class="gh-viewport">
{{!-- Header for all pages --}}
{{> header}}

<main class="gh-main-viewport">
    <div class="gh-side-nav" id="sidenav">
        {{navigation type="secondary"}}
    </div>
    <section class="gh-main">

        {{{body}}}
        {{!-- All content gets inserted here, index.hbs, post.hbs, etc --}}
    </section>
</main>  

{{!-- Footer --}}
{{> footer}}
</div>

{{!-- Jquery scripts --}}
{{!-- <script src="https://cdn.cove.chat/comments.js" async></script> --}}
{{!-- <script src="{{asset "/js/scripts.js"}}"></script> --}}

{{#is "post,page"}}
<script src="{{asset "/js/single.js"}}"></script>
{{/is}}

{{!-- to show block scripts --}}
{{{block "scripts"}}}
{{!-- ghost footer --}}
{{ghost_foot}}

</body>
 <script>   

    pagination_next_page_number = '{{ pagination.next }}',
    pagination_available_pages_number = '{{ pagination.pages }}';
    
    

// Toggle the menu open and close when on mobile


function openSideBar(){
    let hamburger = document.getElementById('hamburger');
    let sidenav = document.getElementById('sidenav');
    let main = document.querySelector('.gh-main');
    let container = document.querySelector('.gh-container');

    hamburger.addEventListener('click', function() {
        if (sidenav.style.width === '0px' || sidenav.style.width === '') {
            sidenav.style.width = '250px';
            sidenav.classList.add('gh-side-nav-open');
            main.classList.add('gh-main-open');
            container.classList.add('gh-open-container');
        } else {
            sidenav.style.width = '0px';
            sidenav.classList.remove('gh-side-nav-open');
            main.classList.remove('gh-main-open');
            container.classList.remove('gh-open-container');
        }
    });
}

 function raisedNavbar(){
    window.addEventListener('scroll', function() {
        let header = document.getElementById('gh-head');
        if (window.pageYOffset > 0) {
            header.classList.add('scroll-shadow');
        } else {
            header.classList.remove('scroll-shadow');
        }
    });

}
function menuOpen() {
    const burgerButton = document.querySelector('.gh-burger-inner');
    burgerButton.addEventListener('click', function () {
        document.body.classList.toggle('gh-head-open');
    });
}
openSideBar()
raisedNavbar()
menuOpen()
</script>

<script type="module">
    import tryghostcontentApi from 'https://cdn.jsdelivr.net/npm/@tryghost/content-api@1.11.17/+esm';

    // Initialize the API
    const api = new tryghostcontentApi({
        url: 'https://theugandanexponent.com/',
        key: '9b9deb11ea8bd23613b6b43e63',
        version: 'v5'
    });

    async function fetchAndStorePosts() {
        const posts = await api.posts.browse({ limit: 10 });
        localStorage.setItem('posts', JSON.stringify(posts));
    }

    function getPostsFromStorage() {
        const posts = localStorage.getItem('posts');
        return JSON.parse(posts);
    }

    function displayPost(post) {
        const postWrapper = document.getElementById("headlines");
        postWrapper.innerHTML = `<a href="${post.url}"><h4>${post.title}</h4></a>`;
    }

    async function showTitles() {
        let currentPostIndex = 0;

        // Retrieve posts from Local Storage
        const posts = getPostsFromStorage();
        console.log(posts)

        function displayNextPost() {
            if (posts && currentPostIndex < posts.length) {
                displayPost(posts[currentPostIndex]);
                currentPostIndex = (currentPostIndex + 1) % posts.length;  // Loop back to the first post when reach the end
            }
        }

        // Call displayNextPost directly without waiting for DOMContentLoaded
        displayNextPost();

        // Update the element every 10 seconds
        setInterval(displayNextPost, 10000);
    }

    // Fetch and store posts, then show titles after DOM is fully loaded
    fetchAndStorePosts().then(() => {
        window.addEventListener('DOMContentLoaded', showTitles());
    });

</script>

</html>